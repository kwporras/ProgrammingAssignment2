source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages(c("slidify","ggplot2","devtools"))
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatures","AnnotationDbi"))
library(ggplot2)
search()
install.packages("devtools")
library(devtools)
find-rtools()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
save.image("~/HelloWorld.md.RData")
save.image("~/HelloWorld.md.RData")
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
```{r}
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
```{r}
```{r}
summary(cars)
plot(cars)
## This is a markdown file
##This is a markdown file
## This is a markdown file
title: "HelloWorld.md"
output: html_document
---
```{r}
## This is a markdown file
```
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
## This is a markdown file
## This is a markdown file
rmarkdown
install.packages("rmarkdown")
## This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
add2 <- funtion(x,y) {
x+y
}
add2 <- funtion(x,y) {
x+y
}
add2(2,5)
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x,n) {
use <- x >n
x[use]
}
x <- 1:20
above(x)
above(x,12)
above <- function(x,n = 10) {
use <- x >n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numberic(nc)
for(i in 1:nc)  {
mean[i] <- mean(y[,i])
}
means
}
columnmean(x)
columnmean <- function(y, removeNA = True) {
nc <- ncol(y)
means <- numberic(nc)
for(i in 1:nc)  {
mean[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
cube <- function(x,n)  {
x^3
}
cube(3)
x <- 1:10
if(x>5) {
x<-0
}
f <-fuction(x)  {
g <- fuction(y)  {
y + z
}
z<-4
z+g(x)
}
f <-function(x)  {
g <- fuction(y)  {
y + z
}
z<-4
z+g(x)
}
f<-function(x) {
g<- fuction(y) {
y + z
}
z<-4
x+g(x)
}
f<-function(x) {
g<- fuction(y) {
y + z
}
z<-4
x+g(x)
}
f<-function(x) {
g<- function(y) {
y + z
}
z<-4
x+g(x)
}
z<-10
f(3)
cube <- function(x,n)  {
cube(3)
cube(3)
cube(3)
cube(4)
View(above)
View(above)
View(above)
View(above)
View(above)
cube <- function(x,n)  {
x^3
}
cube(3)
f<-function(x) {
g<- function(y) {
y + z
}
z<-4
x+g(x)
}
z<- 10
f(3)
x<-5
y<-if(x<3){
NA
}else{
10
}
source('C:/Users/Alicia/Desktop/Coursera/rprog-data-specdata/complete.R')
source('C:/Users/Alicia/Desktop/Coursera/rprog-data-specdata/complete.R')
> complete <- function(directory, id = 1:332) {
+     files_full <- list.files(directory, full.names = TRUE)
+     dat <- data.frame()
+
+     for (i in id) {
+         moni_i <- read.csv(files_full[i])
+         nobs <- sum(complete.cases(moni_i))
+         tmp <- data.frame(i, nobs)
+         dat <- rbind(dat, tmp)
+     }
+
+     colnames(dat) <- c("id", "nobs")
+     dat
+ }
> complete("specdata",1)
## Keyton Porras Programming Assignment 2
source("C:/Users/Alicia/Desktop/GitFiles/ProgrammingAssignment2/cachematrix.R")
## Matrix inversion is usually a costly computation and
## there may be some benefit to caching the inverse of a
## matrix rather than computing it repeatedly (there are
## also alternatives to matrix inversion that we will not discuss here).
## The following functions cache the inverse of a matrix.
## makeChacheMatrix creates a special "matrix' object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
INV<- NULL
set<- function(y) {
x<<- y
INV<<- NULL
}
get<- function() x
setinverse<- function(inverse) INV<<- inverse
getinverse<- function() INV
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special 'matrix' created by
## makeCacheMatrix.  If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
INV<- x$getinverse()
if(!is.null(INV)){
message("getting cached data")
return(INV)
}
MAT<- x$get()
INV<- solve(MAT,...)
x$setinverse(INV)
INV
}
## Keyton Porras Programming Assignment 2
source("C:/Users/Alicia/Desktop/GitFiles/ProgrammingAssignment2/cachematrix")
## Matrix inversion is usually a costly computation and
## there may be some benefit to caching the inverse of a
## matrix rather than computing it repeatedly (there are
## also alternatives to matrix inversion that we will not discuss here).
## The following functions cache the inverse of a matrix.
## makeChacheMatrix creates a special "matrix' object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
INV<- NULL
set<- function(y) {
x<<- y
INV<<- NULL
}
get<- function() x
setinverse<- function(inverse) INV<<- inverse
getinverse<- function() INV
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special 'matrix' created by
## makeCacheMatrix.  If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
INV<- x$getinverse()
if(!is.null(INV)){
message("getting cached data")
return(INV)
}
MAT<- x$get()
INV<- solve(MAT,...)
x$setinverse(INV)
INV
}
## Keyton Porras Programming Assignment 2
source("C:/Users/Alicia/Desktop/GitFiles/ProgrammingAssignment2/cachematrix.R")
## Matrix inversion is usually a costly computation and
## there may be some benefit to caching the inverse of a
## matrix rather than computing it repeatedly (there are
## also alternatives to matrix inversion that we will not discuss here).
## The following functions cache the inverse of a matrix.
## makeChacheMatrix creates a special "matrix' object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
INV<- NULL
set<- function(y) {
x<<- y
INV<<- NULL
}
get<- function() x
setinverse<- function(inverse) INV<<- inverse
getinverse<- function() INV
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special 'matrix' created by
## makeCacheMatrix.  If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
INV<- x$getinverse()
if(!is.null(INV)){
message("getting cached data")
return(INV)
}
MAT<- x$get()
INV<- solve(MAT,...)
x$setinverse(INV)
INV
}
## Keyton Porras Programming Assignment 2
source("C:/Users/Alicia/Desktop/GitFiles/ProgrammingAssignment2")
## Matrix inversion is usually a costly computation and
## there may be some benefit to caching the inverse of a
## matrix rather than computing it repeatedly (there are
## also alternatives to matrix inversion that we will not discuss here).
## The following functions cache the inverse of a matrix.
## makeChacheMatrix creates a special "matrix' object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
INV<- NULL
set<- function(y) {
x<<- y
INV<<- NULL
}
get<- function() x
setinverse<- function(inverse) INV<<- inverse
getinverse<- function() INV
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special 'matrix' created by
## makeCacheMatrix.  If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
INV<- x$getinverse()
if(!is.null(INV)){
message("getting cached data")
return(INV)
}
MAT<- x$get()
INV<- solve(MAT,...)
x$setinverse(INV)
INV
}
## Keyton Porras Programming Assignment 2
## Matrix inversion is usually a costly computation and
## there may be some benefit to caching the inverse of a
## matrix rather than computing it repeatedly (there are
## also alternatives to matrix inversion that we will not discuss here).
## The following functions cache the inverse of a matrix.
## makeChacheMatrix creates a special "matrix' object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
INV<- NULL
set<- function(y) {
x<<- y
INV<<- NULL
}
get<- function() x
setinverse<- function(inverse) INV<<- inverse
getinverse<- function() INV
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve computes the inverse of the special 'matrix' created by
## makeCacheMatrix.  If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve
## the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
INV<- x$getinverse()
if(!is.null(INV)){
message("getting cached data")
return(INV)
}
MAT<- x$get()
INV<- solve(MAT,...)
x$setinverse(INV)
INV
}
setwd("C:/Users/Alicia/Desktop/GitFiles/ProgrammingAssignment2")
